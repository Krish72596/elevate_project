import React from "react";export type Contest = {  id: string | number;  title: string;  shortLabel?: string;  time?: string;  date?: string;  description?: string;  tags?: string[];  location?: string;  registerUrl?: string;};type Props = {  item: Contest;  expanded: boolean;  onToggle: (id: string | number) => void;};const ContestCard: React.FC<Props> = ({ item, expanded, onToggle }) => {  return (    <div      role="button"      aria-expanded={expanded}      onClick={() => onToggle(item.id)}      className={`group cursor-pointer select-none mb-4 transition-all duration-300 ${        expanded ? "shadow-2xl scale-[1.01]" : "hover:scale-[1.01]"      }`}    >      <div        className={`w-full rounded-lg overflow-hidden bg-gradient-to-r from-indigo-700 via-purple-700 to-slate-700          border border-[rgba(255,255,255,0.06)] p-4 flex items-center justify-between gap-4`}      >        <div className="flex items-center gap-4 min-w-0">          <div className="text-sm font-semibold text-pink-300 min-w-[80px]">            {item.shortLabel ?? "LABEL"}          </div>          <div className="min-w-0">            <div className="text-white text-lg font-medium truncate">{item.title}</div>            {!expanded && item.description && (              <div className="text-sm text-slate-300 truncate mt-1">{item.description}</div>            )}          </div>        </div>        <div className="flex items-center gap-6">          {item.time && <div className="text-sm text-rose-400">{item.time}</div>}          {item.date && <div className="text-sm text-slate-200">{item.date}</div>}        </div>      </div>      {/* expandable area */}      <div        className={`bg-slate-800 overflow-hidden transition-[max-height,opacity,padding] duration-300 ${          expanded ? "max-h-[420px] opacity-100 p-4" : "max-h-0 opacity-0 p-0"        }`}      >        {expanded && (          <div className="text-sm text-slate-200 space-y-3">            {item.description && <p className="leading-relaxed">{item.description}</p>}            <div className="flex flex-wrap items-center gap-3">              {item.tags?.map((t) => (                <span key={t} className="text-xs bg-white/6 px-2 py-1 rounded-md text-slate-200">                  {t}                </span>              ))}            </div>            <div className="flex items-center justify-between gap-4 mt-2">              <div className="text-sm text-slate-300">                {item.location && <div>Location: {item.location}</div>}                {item.time && <div>Time: {item.time}</div>}                {item.date && <div>Date: {item.date}</div>}              </div>              <div className="flex gap-2">                {item.registerUrl && (                  <a                    href={item.registerUrl}                    target="_blank"                    rel="noreferrer"                    onClick={(e) => e.stopPropagation()}                    className="px-4 py-2 bg-emerald-500 text-white rounded-md text-sm hover:brightness-95"                  >                    Register                  </a>                )}                <button                  onClick={(e) => {                    e.stopPropagation();                    onToggle(item.id);                  }}                  className="px-3 py-2 bg-white/6 text-white rounded-md text-sm"                >                  Close                </button>              </div>            </div>          </div>        )}      </div>    </div>  );};export default ContestCard;